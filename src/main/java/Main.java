

/**
 * (주안점)
 *
 * 1. 객체지향
 *   - 기능 단위 분류. 기능을 정의 후 그에 맞는 상태 정의.  ->  상태를 어떤 형태로 관리할 것인가?
 *   - 비슷한 기능들을 하나의 역할로 묶어 객체 설계.
 *   - 객체 간 메시지 통신에 집중.
 *
 *   - 영상의 설계를 따라하지 말고 내 스스로 설계를 떠올리려 해보기8
 *
 * 2. TDD 따라하기
 *   - 테스트 코드 먼저 작성. 거꾸로 따라가는 코딩.
 *
 * 3. 제한사항
 *   - indent 1 depth
 *   - else, switch case 금지
 *   - 원시 값 포장
 *
 *
 * (기능 정의)
 *   - input, output
 *   - play (strike, ball)
 *   - replay check
 *   - 난수 추출
 *
 *   - 각 기능 별 에외처리
 *   - 각 상태 별 유효성 검증 (검증용 객체를 따로 두진 말자)
 *
 * (객체)
 *  - 진행자 : 전체적인 흐름 주관
 *  - 컴퓨터 :
 *  -
 *
 *  전체 구조를 먼저 생각하는 것이 아닌
 *  세부 기능들을 먼저 떠올리고 그에 따라 객체를 정의하는 것
 *  너무 어렵다..
 *  이렇게 하는 게 맞긴 한가?
 *  구조를 먼저 떠올리고 거기에 맞추는 게 더 기능을 정의하기에도 더 깔끔하지 않나 하는 생각도..
 *
 *
 */

public class Main {

    static Process process;
    public static void main(String[] args) {
        process = new Process();
        process.startProcess();
    }
}
